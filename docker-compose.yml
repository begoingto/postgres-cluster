services:
  etcd:
    image: quay.io/coreos/etcd:v3.5.15
    container_name: etcd
    # privileged: true
    command: >
      /usr/local/bin/etcd
      --name etcd
      --data-dir /etcd-data
      --listen-peer-urls http://0.0.0.0:2380
      --initial-advertise-peer-urls http://etcd:2380
      --listen-client-urls http://0.0.0.0:2379
      --advertise-client-urls http://etcd:2379
      --initial-cluster-token etcd-single
      --initial-cluster etcd=http://etcd:2380
      --initial-cluster-state new
    volumes:
      - data_etcd:/etcd-data
    networks:
      - postgres_network
    
  etcd_ui:
    image: tzfun/etcd-workbench:latest
    container_name: etcd_ui
    ports:
      - "8002:8002"
    networks:
      - postgres_network

  pg-node1:
    build:
      context: ./patroni-node
    container_name: pg-node1
    hostname: pg-node1
    user: postgres
    environment:
      NODE_NAME: pg-node1
      PATRONI_SCOPE: pgcluster
      ETCD_NODES: etcd:2379
      POSTGRESQL_DATA_DIR: /var/lib/postgresql/data
      SUPERUSER_PASSWORD: super_password
      REPLICATION_PASSWORD: repl_password
      APP_USER: app
      APP_PASSWORD: app_password
      TZ: UTC
    volumes:
      - data_node1:/var/lib/postgresql/data
      - ./primary/init:/docker-entrypoint-initdb.d
      - ./primary/postgresql.primary.conf:/etc/postgresql/postgresql.primary.conf:ro
      - ./shared/archive:/var/lib/postgresql/archive
    networks:
      - postgres_network
    depends_on:
      - etcd
    ports:
      - "5436:5432"   # Optional local access
      - "8008:8008"   # Patroni REST API (node1)

  pg-node2:
    build:
      context: ./patroni-node
    container_name: pg-node2
    hostname: pg-node2
    user: postgres
    environment:
      NODE_NAME: pg-node2
      PATRONI_SCOPE: pgcluster
      ETCD_NODES: etcd:2379
      POSTGRESQL_DATA_DIR: /var/lib/postgresql/data
      SUPERUSER_PASSWORD: super_password
      REPLICATION_PASSWORD: repl_password
      APP_USER: app
      APP_PASSWORD: app_password
      TZ: UTC
    volumes:
      - data_node2:/var/lib/postgresql/data
      - ./shared/archive:/var/lib/postgresql/archive
    networks:
      - postgres_network
    depends_on:
      - etcd
      - pg-node1
  
  pg-node3:
    build:
      context: ./patroni-node
    container_name: pg-node3
    user: postgres
    environment:
      NODE_NAME: pg-node3
      PATRONI_SCOPE: pgcluster
      ETCD_NODES: etcd:2379
      POSTGRESQL_DATA_DIR: /var/lib/postgresql/data
      SUPERUSER_PASSWORD: super_password
      REPLICATION_PASSWORD: repl_password
      APP_USER: app
      APP_PASSWORD: app_password
      TZ: UTC
    volumes:
      - data_node3:/var/lib/postgresql/data
      - ./shared/archive:/var/lib/postgresql/archive
    networks:
      - postgres_network
    depends_on:
      - etcd
      - pg-node1

  # node4:
  #   image: postgres:17.5-bullseye
  #   container_name: postgres_primary
  #   environment:
  #     - POSTGRES_USER=${POSTGRES_USER}
  #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  #     - POSTGRES_DB=${POSTGRES_DB}
  #   ports:
  #     - "5436:5432"
  #   volumes:
  #     - data_node4:/var/lib/postgresql/data
  #     - ./init-primary.sql:/docker-entrypoint-initdb.d/00_init.sql
  #   networks:
  #     - postgres_network
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  haproxy:
    image: haproxy:2.9
    container_name: pg-haproxy
    depends_on:
      - pg-node1
      - pg-node2
      - pg-node3
    ports:
      - "5438:5000"   # Write (primary)
      - "5001:5001"   # Read-only pool
      - "7000:7000"   # HAProxy stats
    volumes:
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    networks:
      - postgres_network


networks:
  postgres_network:
    driver: bridge

volumes:
  data_etcd: 
    driver: local
  data_node1:
    driver: local
  data_node2:
    driver: local
  data_node3:
    driver: local
  data_node4:
    driver: local
