services:
  node1:
    image: pg_replica:latest
    container_name: postgres_primary
    env_file: .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5437:5432"
    volumes:
      - data_node1:/var/lib/postgresql/data
      - ./init-primary.sql:/docker-entrypoint-initdb.d/00_init.sql
    networks:
      - postgres_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # node2:
  #   image: postgres:17.5-bullseye
  #   container_name: postgres_primary
  #   environment:
  #     - POSTGRES_USER=${POSTGRES_USER}
  #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  #     - POSTGRES_DB=${POSTGRES_DB}
  #   ports:
  #     - "5438:5432"
  #   volumes:
  #     - data_node2:/var/lib/postgresql/data
  #     - ./init-primary.sql:/docker-entrypoint-initdb.d/00_init.sql
  #   networks:
  #     - postgres_network
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  
  # node3:
  #   image: postgres:17.5-bullseye
  #   container_name: postgres_primary
  #   environment:
  #     - POSTGRES_USER=${POSTGRES_USER}
  #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  #     - POSTGRES_DB=${POSTGRES_DB}
  #   ports:
  #     - "5439:5432"
  #   volumes:
  #     - data_node3:/var/lib/postgresql/data
  #     - ./init-primary.sql:/docker-entrypoint-initdb.d/00_init.sql
  #   networks:
  #     - postgres_network
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  # node4:
  #   image: postgres:17.5-bullseye
  #   container_name: postgres_primary
  #   environment:
  #     - POSTGRES_USER=${POSTGRES_USER}
  #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  #     - POSTGRES_DB=${POSTGRES_DB}
  #   ports:
  #     - "5436:5432"
  #   volumes:
  #     - data_node4:/var/lib/postgresql/data
  #     - ./init-primary.sql:/docker-entrypoint-initdb.d/00_init.sql
  #   networks:
  #     - postgres_network
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  # haproxy:
  #   image: haproxy:2.8
  #   container_name: haproxy
  #   volumes:
  #     - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
  #   ports:
  #     - "5435:5435"  # Client connections
  #     - "8080:8080"  # Stats interface
  #   networks:
  #     - postgres_network
  #   depends_on:
  #     - postgres_primary
  #     - postgres_replica1
  #     - postgres_replica2
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8080/stats"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5


networks:
  postgres_network:
    driver: bridge

volumes:
  data_node1:
    driver: local
  data_node2:
    driver: local
  data_node3:
    driver: local
  data_node4:
    driver: local
