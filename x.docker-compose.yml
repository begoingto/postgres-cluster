services:
  postgres_primary:
    image: postgres:17.5-bullseye
    container_name: postgres_primary
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
    ports:
      - "5437:5432"
    volumes:
      - primary_data:/var/lib/postgresql/data
      - ./init-primary.sql:/docker-entrypoint-initdb.d/00_init.sql
    networks:
      - postgres_network
    command: >
      postgres
      -c wal_level=replica
      -c max_wal_senders=10
      -c max_replication_slots=10
      -c listen_addresses=*
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    # restart: unless-stopped

  postgres_replica1:
    image: postgres:17.5-bullseye
    container_name: postgres_replica1
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
    ports:
      - "5438:5432"
    volumes:
      - replica1_data:/var/lib/postgresql/data
    networks:
      - postgres_network
    command: >
      bash -c "
        until pg_isready -h postgres_primary -p 5432 -U ${POSTGRES_USER:-postgres}; do
          echo 'Waiting for primary...'; sleep 1;
        done;
        rm -rf /var/lib/postgresql/data/*;
        pg_basebackup -h postgres_primary -D /var/lib/postgresql/data -U ${POSTGRES_USER:-postgres} -P -R;
        postgres
      "
    depends_on:
      - postgres_primary
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    # restart: unless-stopped

  postgres_replica2:
    image: postgres:17.5-bullseye
    container_name: postgres_replica2
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
    ports:
      - "5439:5432"
    volumes:
      - replica2_data:/var/lib/postgresql/data
    networks:
      - postgres_network
    command: >
      bash -c "
        until pg_isready -h postgres_primary -p 5432 -U ${POSTGRES_USER:-postgres}; do
          echo 'Waiting for primary...'; sleep 1;
        done;
        rm -rf /var/lib/postgresql/data/*;
        pg_basebackup -h postgres_primary -D /var/lib/postgresql/data -U ${POSTGRES_USER:-postgres} -P -R;
        postgres
      "
    depends_on:
      - postgres_primary
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    # restart: unless-stopped

  haproxy:
    image: haproxy:2.8
    container_name: haproxy
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    ports:
      - "5435:5435"  # Client connections
      - "8080:8080"  # Stats interface
    networks:
      - postgres_network
    depends_on:
      - postgres_primary
      - postgres_replica1
      - postgres_replica2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/stats"]
      interval: 10s
      timeout: 5s
      retries: 5
    # restart: unless-stopped

volumes:
  primary_data:
    driver: local
  replica1_data:
    driver: local
  replica2_data:
    driver: local

networks:
  postgres_network:
    driver: bridge
